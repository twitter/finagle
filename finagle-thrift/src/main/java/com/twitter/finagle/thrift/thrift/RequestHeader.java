/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.twitter.finagle.thrift.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * RequestHeader defines headers for the request. These carry the span data, and
 * a flag indicating whether the request is to be debugged.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-09")
public class RequestHeader implements org.apache.thrift.TBase<RequestHeader, RequestHeader._Fields>, java.io.Serializable, Cloneable, Comparable<RequestHeader> {
  private static final long serialVersionUID = 1L;
  
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RequestHeader");

  private static final org.apache.thrift.protocol.TField TRACE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_id", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("span_id", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField PARENT_SPAN_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parent_span_id", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SAMPLED_FIELD_DESC = new org.apache.thrift.protocol.TField("sampled", org.apache.thrift.protocol.TType.BOOL, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("client_id", org.apache.thrift.protocol.TType.STRUCT, (short)6);
  private static final org.apache.thrift.protocol.TField FLAGS_FIELD_DESC = new org.apache.thrift.protocol.TField("flags", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField CONTEXTS_FIELD_DESC = new org.apache.thrift.protocol.TField("contexts", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField DEST_FIELD_DESC = new org.apache.thrift.protocol.TField("dest", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField DELEGATIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("delegations", org.apache.thrift.protocol.TType.LIST, (short)10);
  private static final org.apache.thrift.protocol.TField TRACE_ID_HIGH_FIELD_DESC = new org.apache.thrift.protocol.TField("trace_id_high", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RequestHeaderStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RequestHeaderTupleSchemeFactory();

  public long trace_id; // required
  public long span_id; // required
  public long parent_span_id; // optional
  public boolean sampled; // optional
  public ClientId client_id; // optional
  public long flags; // optional
  public java.util.List<RequestContext> contexts; // required
  public java.lang.String dest; // optional
  public java.util.List<Delegation> delegations; // optional
  public long trace_id_high; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TRACE_ID((short)1, "trace_id"),
    SPAN_ID((short)2, "span_id"),
    PARENT_SPAN_ID((short)3, "parent_span_id"),
    SAMPLED((short)5, "sampled"),
    CLIENT_ID((short)6, "client_id"),
    FLAGS((short)7, "flags"),
    CONTEXTS((short)8, "contexts"),
    DEST((short)9, "dest"),
    DELEGATIONS((short)10, "delegations"),
    TRACE_ID_HIGH((short)11, "trace_id_high");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TRACE_ID
          return TRACE_ID;
        case 2: // SPAN_ID
          return SPAN_ID;
        case 3: // PARENT_SPAN_ID
          return PARENT_SPAN_ID;
        case 5: // SAMPLED
          return SAMPLED;
        case 6: // CLIENT_ID
          return CLIENT_ID;
        case 7: // FLAGS
          return FLAGS;
        case 8: // CONTEXTS
          return CONTEXTS;
        case 9: // DEST
          return DEST;
        case 10: // DELEGATIONS
          return DELEGATIONS;
        case 11: // TRACE_ID_HIGH
          return TRACE_ID_HIGH;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TRACE_ID_ISSET_ID = 0;
  private static final int __SPAN_ID_ISSET_ID = 1;
  private static final int __PARENT_SPAN_ID_ISSET_ID = 2;
  private static final int __SAMPLED_ISSET_ID = 3;
  private static final int __FLAGS_ISSET_ID = 4;
  private static final int __TRACE_ID_HIGH_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PARENT_SPAN_ID,_Fields.SAMPLED,_Fields.CLIENT_ID,_Fields.FLAGS,_Fields.DEST,_Fields.DELEGATIONS,_Fields.TRACE_ID_HIGH};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TRACE_ID, new org.apache.thrift.meta_data.FieldMetaData("trace_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("span_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PARENT_SPAN_ID, new org.apache.thrift.meta_data.FieldMetaData("parent_span_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SAMPLED, new org.apache.thrift.meta_data.FieldMetaData("sampled", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("client_id", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ClientId.class)));
    tmpMap.put(_Fields.FLAGS, new org.apache.thrift.meta_data.FieldMetaData("flags", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CONTEXTS, new org.apache.thrift.meta_data.FieldMetaData("contexts", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, RequestContext.class))));
    tmpMap.put(_Fields.DEST, new org.apache.thrift.meta_data.FieldMetaData("dest", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DELEGATIONS, new org.apache.thrift.meta_data.FieldMetaData("delegations", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Delegation.class))));
    tmpMap.put(_Fields.TRACE_ID_HIGH, new org.apache.thrift.meta_data.FieldMetaData("trace_id_high", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RequestHeader.class, metaDataMap);
  }

  public RequestHeader() {
  }

  public RequestHeader(
    long trace_id,
    long span_id,
    java.util.List<RequestContext> contexts)
  {
    this();
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    this.span_id = span_id;
    setSpan_idIsSet(true);
    this.contexts = contexts;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RequestHeader(RequestHeader other) {
    __isset_bitfield = other.__isset_bitfield;
    this.trace_id = other.trace_id;
    this.span_id = other.span_id;
    this.parent_span_id = other.parent_span_id;
    this.sampled = other.sampled;
    if (other.isSetClient_id()) {
      this.client_id = new ClientId(other.client_id);
    }
    this.flags = other.flags;
    if (other.isSetContexts()) {
      java.util.List<RequestContext> __this__contexts = new java.util.ArrayList<RequestContext>(other.contexts.size());
      for (RequestContext other_element : other.contexts) {
        __this__contexts.add(new RequestContext(other_element));
      }
      this.contexts = __this__contexts;
    }
    if (other.isSetDest()) {
      this.dest = other.dest;
    }
    if (other.isSetDelegations()) {
      java.util.List<Delegation> __this__delegations = new java.util.ArrayList<Delegation>(other.delegations.size());
      for (Delegation other_element : other.delegations) {
        __this__delegations.add(new Delegation(other_element));
      }
      this.delegations = __this__delegations;
    }
    this.trace_id_high = other.trace_id_high;
  }

  public RequestHeader deepCopy() {
    return new RequestHeader(this);
  }

  @Override
  public void clear() {
    setTrace_idIsSet(false);
    this.trace_id = 0;
    setSpan_idIsSet(false);
    this.span_id = 0;
    setParent_span_idIsSet(false);
    this.parent_span_id = 0;
    setSampledIsSet(false);
    this.sampled = false;
    this.client_id = null;
    setFlagsIsSet(false);
    this.flags = 0;
    this.contexts = null;
    this.dest = null;
    this.delegations = null;
    setTrace_id_highIsSet(false);
    this.trace_id_high = 0;
  }

  public long getTrace_id() {
    return this.trace_id;
  }

  public RequestHeader setTrace_id(long trace_id) {
    this.trace_id = trace_id;
    setTrace_idIsSet(true);
    return this;
  }

  public void unsetTrace_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACE_ID_ISSET_ID);
  }

  /** Returns true if field trace_id is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACE_ID_ISSET_ID);
  }

  public void setTrace_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACE_ID_ISSET_ID, value);
  }

  public long getSpan_id() {
    return this.span_id;
  }

  public RequestHeader setSpan_id(long span_id) {
    this.span_id = span_id;
    setSpan_idIsSet(true);
    return this;
  }

  public void unsetSpan_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SPAN_ID_ISSET_ID);
  }

  /** Returns true if field span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetSpan_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SPAN_ID_ISSET_ID);
  }

  public void setSpan_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SPAN_ID_ISSET_ID, value);
  }

  public long getParent_span_id() {
    return this.parent_span_id;
  }

  public RequestHeader setParent_span_id(long parent_span_id) {
    this.parent_span_id = parent_span_id;
    setParent_span_idIsSet(true);
    return this;
  }

  public void unsetParent_span_id() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID);
  }

  /** Returns true if field parent_span_id is set (has been assigned a value) and false otherwise */
  public boolean isSetParent_span_id() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID);
  }

  public void setParent_span_idIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PARENT_SPAN_ID_ISSET_ID, value);
  }

  public boolean isSampled() {
    return this.sampled;
  }

  public RequestHeader setSampled(boolean sampled) {
    this.sampled = sampled;
    setSampledIsSet(true);
    return this;
  }

  public void unsetSampled() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  /** Returns true if field sampled is set (has been assigned a value) and false otherwise */
  public boolean isSetSampled() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SAMPLED_ISSET_ID);
  }

  public void setSampledIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SAMPLED_ISSET_ID, value);
  }

  public ClientId getClient_id() {
    return this.client_id;
  }

  public RequestHeader setClient_id(ClientId client_id) {
    this.client_id = client_id;
    return this;
  }

  public void unsetClient_id() {
    this.client_id = null;
  }

  /** Returns true if field client_id is set (has been assigned a value) and false otherwise */
  public boolean isSetClient_id() {
    return this.client_id != null;
  }

  public void setClient_idIsSet(boolean value) {
    if (!value) {
      this.client_id = null;
    }
  }

  public long getFlags() {
    return this.flags;
  }

  public RequestHeader setFlags(long flags) {
    this.flags = flags;
    setFlagsIsSet(true);
    return this;
  }

  public void unsetFlags() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  /** Returns true if field flags is set (has been assigned a value) and false otherwise */
  public boolean isSetFlags() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __FLAGS_ISSET_ID);
  }

  public void setFlagsIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __FLAGS_ISSET_ID, value);
  }

  public int getContextsSize() {
    return (this.contexts == null) ? 0 : this.contexts.size();
  }

  public java.util.Iterator<RequestContext> getContextsIterator() {
    return (this.contexts == null) ? null : this.contexts.iterator();
  }

  public void addToContexts(RequestContext elem) {
    if (this.contexts == null) {
      this.contexts = new java.util.ArrayList<RequestContext>();
    }
    this.contexts.add(elem);
  }

  public java.util.List<RequestContext> getContexts() {
    return this.contexts;
  }

  public RequestHeader setContexts(java.util.List<RequestContext> contexts) {
    this.contexts = contexts;
    return this;
  }

  public void unsetContexts() {
    this.contexts = null;
  }

  /** Returns true if field contexts is set (has been assigned a value) and false otherwise */
  public boolean isSetContexts() {
    return this.contexts != null;
  }

  public void setContextsIsSet(boolean value) {
    if (!value) {
      this.contexts = null;
    }
  }

  public java.lang.String getDest() {
    return this.dest;
  }

  public RequestHeader setDest(java.lang.String dest) {
    this.dest = dest;
    return this;
  }

  public void unsetDest() {
    this.dest = null;
  }

  /** Returns true if field dest is set (has been assigned a value) and false otherwise */
  public boolean isSetDest() {
    return this.dest != null;
  }

  public void setDestIsSet(boolean value) {
    if (!value) {
      this.dest = null;
    }
  }

  public int getDelegationsSize() {
    return (this.delegations == null) ? 0 : this.delegations.size();
  }

  public java.util.Iterator<Delegation> getDelegationsIterator() {
    return (this.delegations == null) ? null : this.delegations.iterator();
  }

  public void addToDelegations(Delegation elem) {
    if (this.delegations == null) {
      this.delegations = new java.util.ArrayList<Delegation>();
    }
    this.delegations.add(elem);
  }

  public java.util.List<Delegation> getDelegations() {
    return this.delegations;
  }

  public RequestHeader setDelegations(java.util.List<Delegation> delegations) {
    this.delegations = delegations;
    return this;
  }

  public void unsetDelegations() {
    this.delegations = null;
  }

  /** Returns true if field delegations is set (has been assigned a value) and false otherwise */
  public boolean isSetDelegations() {
    return this.delegations != null;
  }

  public void setDelegationsIsSet(boolean value) {
    if (!value) {
      this.delegations = null;
    }
  }

  public long getTrace_id_high() {
    return this.trace_id_high;
  }

  public RequestHeader setTrace_id_high(long trace_id_high) {
    this.trace_id_high = trace_id_high;
    setTrace_id_highIsSet(true);
    return this;
  }

  public void unsetTrace_id_high() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TRACE_ID_HIGH_ISSET_ID);
  }

  /** Returns true if field trace_id_high is set (has been assigned a value) and false otherwise */
  public boolean isSetTrace_id_high() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TRACE_ID_HIGH_ISSET_ID);
  }

  public void setTrace_id_highIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TRACE_ID_HIGH_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TRACE_ID:
      if (value == null) {
        unsetTrace_id();
      } else {
        setTrace_id((java.lang.Long)value);
      }
      break;

    case SPAN_ID:
      if (value == null) {
        unsetSpan_id();
      } else {
        setSpan_id((java.lang.Long)value);
      }
      break;

    case PARENT_SPAN_ID:
      if (value == null) {
        unsetParent_span_id();
      } else {
        setParent_span_id((java.lang.Long)value);
      }
      break;

    case SAMPLED:
      if (value == null) {
        unsetSampled();
      } else {
        setSampled((java.lang.Boolean)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClient_id();
      } else {
        setClient_id((ClientId)value);
      }
      break;

    case FLAGS:
      if (value == null) {
        unsetFlags();
      } else {
        setFlags((java.lang.Long)value);
      }
      break;

    case CONTEXTS:
      if (value == null) {
        unsetContexts();
      } else {
        setContexts((java.util.List<RequestContext>)value);
      }
      break;

    case DEST:
      if (value == null) {
        unsetDest();
      } else {
        setDest((java.lang.String)value);
      }
      break;

    case DELEGATIONS:
      if (value == null) {
        unsetDelegations();
      } else {
        setDelegations((java.util.List<Delegation>)value);
      }
      break;

    case TRACE_ID_HIGH:
      if (value == null) {
        unsetTrace_id_high();
      } else {
        setTrace_id_high((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TRACE_ID:
      return getTrace_id();

    case SPAN_ID:
      return getSpan_id();

    case PARENT_SPAN_ID:
      return getParent_span_id();

    case SAMPLED:
      return isSampled();

    case CLIENT_ID:
      return getClient_id();

    case FLAGS:
      return getFlags();

    case CONTEXTS:
      return getContexts();

    case DEST:
      return getDest();

    case DELEGATIONS:
      return getDelegations();

    case TRACE_ID_HIGH:
      return getTrace_id_high();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TRACE_ID:
      return isSetTrace_id();
    case SPAN_ID:
      return isSetSpan_id();
    case PARENT_SPAN_ID:
      return isSetParent_span_id();
    case SAMPLED:
      return isSetSampled();
    case CLIENT_ID:
      return isSetClient_id();
    case FLAGS:
      return isSetFlags();
    case CONTEXTS:
      return isSetContexts();
    case DEST:
      return isSetDest();
    case DELEGATIONS:
      return isSetDelegations();
    case TRACE_ID_HIGH:
      return isSetTrace_id_high();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RequestHeader)
      return this.equals((RequestHeader)that);
    return false;
  }

  public boolean equals(RequestHeader that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_trace_id = true;
    boolean that_present_trace_id = true;
    if (this_present_trace_id || that_present_trace_id) {
      if (!(this_present_trace_id && that_present_trace_id))
        return false;
      if (this.trace_id != that.trace_id)
        return false;
    }

    boolean this_present_span_id = true;
    boolean that_present_span_id = true;
    if (this_present_span_id || that_present_span_id) {
      if (!(this_present_span_id && that_present_span_id))
        return false;
      if (this.span_id != that.span_id)
        return false;
    }

    boolean this_present_parent_span_id = true && this.isSetParent_span_id();
    boolean that_present_parent_span_id = true && that.isSetParent_span_id();
    if (this_present_parent_span_id || that_present_parent_span_id) {
      if (!(this_present_parent_span_id && that_present_parent_span_id))
        return false;
      if (this.parent_span_id != that.parent_span_id)
        return false;
    }

    boolean this_present_sampled = true && this.isSetSampled();
    boolean that_present_sampled = true && that.isSetSampled();
    if (this_present_sampled || that_present_sampled) {
      if (!(this_present_sampled && that_present_sampled))
        return false;
      if (this.sampled != that.sampled)
        return false;
    }

    boolean this_present_client_id = true && this.isSetClient_id();
    boolean that_present_client_id = true && that.isSetClient_id();
    if (this_present_client_id || that_present_client_id) {
      if (!(this_present_client_id && that_present_client_id))
        return false;
      if (!this.client_id.equals(that.client_id))
        return false;
    }

    boolean this_present_flags = true && this.isSetFlags();
    boolean that_present_flags = true && that.isSetFlags();
    if (this_present_flags || that_present_flags) {
      if (!(this_present_flags && that_present_flags))
        return false;
      if (this.flags != that.flags)
        return false;
    }

    boolean this_present_contexts = true && this.isSetContexts();
    boolean that_present_contexts = true && that.isSetContexts();
    if (this_present_contexts || that_present_contexts) {
      if (!(this_present_contexts && that_present_contexts))
        return false;
      if (!this.contexts.equals(that.contexts))
        return false;
    }

    boolean this_present_dest = true && this.isSetDest();
    boolean that_present_dest = true && that.isSetDest();
    if (this_present_dest || that_present_dest) {
      if (!(this_present_dest && that_present_dest))
        return false;
      if (!this.dest.equals(that.dest))
        return false;
    }

    boolean this_present_delegations = true && this.isSetDelegations();
    boolean that_present_delegations = true && that.isSetDelegations();
    if (this_present_delegations || that_present_delegations) {
      if (!(this_present_delegations && that_present_delegations))
        return false;
      if (!this.delegations.equals(that.delegations))
        return false;
    }

    boolean this_present_trace_id_high = true && this.isSetTrace_id_high();
    boolean that_present_trace_id_high = true && that.isSetTrace_id_high();
    if (this_present_trace_id_high || that_present_trace_id_high) {
      if (!(this_present_trace_id_high && that_present_trace_id_high))
        return false;
      if (this.trace_id_high != that.trace_id_high)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(trace_id);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(span_id);

    hashCode = hashCode * 8191 + ((isSetParent_span_id()) ? 131071 : 524287);
    if (isSetParent_span_id())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(parent_span_id);

    hashCode = hashCode * 8191 + ((isSetSampled()) ? 131071 : 524287);
    if (isSetSampled())
      hashCode = hashCode * 8191 + ((sampled) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetClient_id()) ? 131071 : 524287);
    if (isSetClient_id())
      hashCode = hashCode * 8191 + client_id.hashCode();

    hashCode = hashCode * 8191 + ((isSetFlags()) ? 131071 : 524287);
    if (isSetFlags())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(flags);

    hashCode = hashCode * 8191 + ((isSetContexts()) ? 131071 : 524287);
    if (isSetContexts())
      hashCode = hashCode * 8191 + contexts.hashCode();

    hashCode = hashCode * 8191 + ((isSetDest()) ? 131071 : 524287);
    if (isSetDest())
      hashCode = hashCode * 8191 + dest.hashCode();

    hashCode = hashCode * 8191 + ((isSetDelegations()) ? 131071 : 524287);
    if (isSetDelegations())
      hashCode = hashCode * 8191 + delegations.hashCode();

    hashCode = hashCode * 8191 + ((isSetTrace_id_high()) ? 131071 : 524287);
    if (isSetTrace_id_high())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(trace_id_high);

    return hashCode;
  }

  @Override
  public int compareTo(RequestHeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTrace_id()).compareTo(other.isSetTrace_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_id, other.trace_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSpan_id()).compareTo(other.isSetSpan_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpan_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.span_id, other.span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParent_span_id()).compareTo(other.isSetParent_span_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParent_span_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parent_span_id, other.parent_span_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSampled()).compareTo(other.isSetSampled());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSampled()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sampled, other.sampled);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClient_id()).compareTo(other.isSetClient_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClient_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.client_id, other.client_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetFlags()).compareTo(other.isSetFlags());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlags()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flags, other.flags);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetContexts()).compareTo(other.isSetContexts());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetContexts()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.contexts, other.contexts);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDest()).compareTo(other.isSetDest());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDest()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dest, other.dest);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDelegations()).compareTo(other.isSetDelegations());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDelegations()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delegations, other.delegations);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTrace_id_high()).compareTo(other.isSetTrace_id_high());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTrace_id_high()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.trace_id_high, other.trace_id_high);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RequestHeader(");
    boolean first = true;

    sb.append("trace_id:");
    sb.append(this.trace_id);
    first = false;
    if (!first) sb.append(", ");
    sb.append("span_id:");
    sb.append(this.span_id);
    first = false;
    if (isSetParent_span_id()) {
      if (!first) sb.append(", ");
      sb.append("parent_span_id:");
      sb.append(this.parent_span_id);
      first = false;
    }
    if (isSetSampled()) {
      if (!first) sb.append(", ");
      sb.append("sampled:");
      sb.append(this.sampled);
      first = false;
    }
    if (isSetClient_id()) {
      if (!first) sb.append(", ");
      sb.append("client_id:");
      if (this.client_id == null) {
        sb.append("null");
      } else {
        sb.append(this.client_id);
      }
      first = false;
    }
    if (isSetFlags()) {
      if (!first) sb.append(", ");
      sb.append("flags:");
      sb.append(this.flags);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("contexts:");
    if (this.contexts == null) {
      sb.append("null");
    } else {
      sb.append(this.contexts);
    }
    first = false;
    if (isSetDest()) {
      if (!first) sb.append(", ");
      sb.append("dest:");
      if (this.dest == null) {
        sb.append("null");
      } else {
        sb.append(this.dest);
      }
      first = false;
    }
    if (isSetDelegations()) {
      if (!first) sb.append(", ");
      sb.append("delegations:");
      if (this.delegations == null) {
        sb.append("null");
      } else {
        sb.append(this.delegations);
      }
      first = false;
    }
    if (isSetTrace_id_high()) {
      if (!first) sb.append(", ");
      sb.append("trace_id_high:");
      sb.append(this.trace_id_high);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (client_id != null) {
      client_id.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RequestHeaderStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestHeaderStandardScheme getScheme() {
      return new RequestHeaderStandardScheme();
    }
  }

  private static class RequestHeaderStandardScheme extends org.apache.thrift.scheme.StandardScheme<RequestHeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TRACE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.trace_id = iprot.readI64();
              struct.setTrace_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.span_id = iprot.readI64();
              struct.setSpan_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PARENT_SPAN_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.parent_span_id = iprot.readI64();
              struct.setParent_span_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SAMPLED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.sampled = iprot.readBool();
              struct.setSampledIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.client_id = new ClientId();
              struct.client_id.read(iprot);
              struct.setClient_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // FLAGS
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.flags = iprot.readI64();
              struct.setFlagsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CONTEXTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.contexts = new java.util.ArrayList<RequestContext>(_list16.size);
                RequestContext _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new RequestContext();
                  _elem17.read(iprot);
                  struct.contexts.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setContextsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // DEST
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dest = iprot.readString();
              struct.setDestIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // DELEGATIONS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list19 = iprot.readListBegin();
                struct.delegations = new java.util.ArrayList<Delegation>(_list19.size);
                Delegation _elem20;
                for (int _i21 = 0; _i21 < _list19.size; ++_i21)
                {
                  _elem20 = new Delegation();
                  _elem20.read(iprot);
                  struct.delegations.add(_elem20);
                }
                iprot.readListEnd();
              }
              struct.setDelegationsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TRACE_ID_HIGH
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.trace_id_high = iprot.readI64();
              struct.setTrace_id_highIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RequestHeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TRACE_ID_FIELD_DESC);
      oprot.writeI64(struct.trace_id);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SPAN_ID_FIELD_DESC);
      oprot.writeI64(struct.span_id);
      oprot.writeFieldEnd();
      if (struct.isSetParent_span_id()) {
        oprot.writeFieldBegin(PARENT_SPAN_ID_FIELD_DESC);
        oprot.writeI64(struct.parent_span_id);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSampled()) {
        oprot.writeFieldBegin(SAMPLED_FIELD_DESC);
        oprot.writeBool(struct.sampled);
        oprot.writeFieldEnd();
      }
      if (struct.client_id != null) {
        if (struct.isSetClient_id()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          struct.client_id.write(oprot);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetFlags()) {
        oprot.writeFieldBegin(FLAGS_FIELD_DESC);
        oprot.writeI64(struct.flags);
        oprot.writeFieldEnd();
      }
      if (struct.contexts != null) {
        oprot.writeFieldBegin(CONTEXTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.contexts.size()));
          for (RequestContext _iter22 : struct.contexts)
          {
            _iter22.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.dest != null) {
        if (struct.isSetDest()) {
          oprot.writeFieldBegin(DEST_FIELD_DESC);
          oprot.writeString(struct.dest);
          oprot.writeFieldEnd();
        }
      }
      if (struct.delegations != null) {
        if (struct.isSetDelegations()) {
          oprot.writeFieldBegin(DELEGATIONS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.delegations.size()));
            for (Delegation _iter23 : struct.delegations)
            {
              _iter23.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetTrace_id_high()) {
        oprot.writeFieldBegin(TRACE_ID_HIGH_FIELD_DESC);
        oprot.writeI64(struct.trace_id_high);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RequestHeaderTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RequestHeaderTupleScheme getScheme() {
      return new RequestHeaderTupleScheme();
    }
  }

  private static class RequestHeaderTupleScheme extends org.apache.thrift.scheme.TupleScheme<RequestHeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTrace_id()) {
        optionals.set(0);
      }
      if (struct.isSetSpan_id()) {
        optionals.set(1);
      }
      if (struct.isSetParent_span_id()) {
        optionals.set(2);
      }
      if (struct.isSetSampled()) {
        optionals.set(3);
      }
      if (struct.isSetClient_id()) {
        optionals.set(4);
      }
      if (struct.isSetFlags()) {
        optionals.set(5);
      }
      if (struct.isSetContexts()) {
        optionals.set(6);
      }
      if (struct.isSetDest()) {
        optionals.set(7);
      }
      if (struct.isSetDelegations()) {
        optionals.set(8);
      }
      if (struct.isSetTrace_id_high()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetTrace_id()) {
        oprot.writeI64(struct.trace_id);
      }
      if (struct.isSetSpan_id()) {
        oprot.writeI64(struct.span_id);
      }
      if (struct.isSetParent_span_id()) {
        oprot.writeI64(struct.parent_span_id);
      }
      if (struct.isSetSampled()) {
        oprot.writeBool(struct.sampled);
      }
      if (struct.isSetClient_id()) {
        struct.client_id.write(oprot);
      }
      if (struct.isSetFlags()) {
        oprot.writeI64(struct.flags);
      }
      if (struct.isSetContexts()) {
        {
          oprot.writeI32(struct.contexts.size());
          for (RequestContext _iter24 : struct.contexts)
          {
            _iter24.write(oprot);
          }
        }
      }
      if (struct.isSetDest()) {
        oprot.writeString(struct.dest);
      }
      if (struct.isSetDelegations()) {
        {
          oprot.writeI32(struct.delegations.size());
          for (Delegation _iter25 : struct.delegations)
          {
            _iter25.write(oprot);
          }
        }
      }
      if (struct.isSetTrace_id_high()) {
        oprot.writeI64(struct.trace_id_high);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RequestHeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.trace_id = iprot.readI64();
        struct.setTrace_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.span_id = iprot.readI64();
        struct.setSpan_idIsSet(true);
      }
      if (incoming.get(2)) {
        struct.parent_span_id = iprot.readI64();
        struct.setParent_span_idIsSet(true);
      }
      if (incoming.get(3)) {
        struct.sampled = iprot.readBool();
        struct.setSampledIsSet(true);
      }
      if (incoming.get(4)) {
        struct.client_id = new ClientId();
        struct.client_id.read(iprot);
        struct.setClient_idIsSet(true);
      }
      if (incoming.get(5)) {
        struct.flags = iprot.readI64();
        struct.setFlagsIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list26 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.contexts = new java.util.ArrayList<RequestContext>(_list26.size);
          RequestContext _elem27;
          for (int _i28 = 0; _i28 < _list26.size; ++_i28)
          {
            _elem27 = new RequestContext();
            _elem27.read(iprot);
            struct.contexts.add(_elem27);
          }
        }
        struct.setContextsIsSet(true);
      }
      if (incoming.get(7)) {
        struct.dest = iprot.readString();
        struct.setDestIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.delegations = new java.util.ArrayList<Delegation>(_list29.size);
          Delegation _elem30;
          for (int _i31 = 0; _i31 < _list29.size; ++_i31)
          {
            _elem30 = new Delegation();
            _elem30.read(iprot);
            struct.delegations.add(_elem30);
          }
        }
        struct.setDelegationsIsSet(true);
      }
      if (incoming.get(9)) {
        struct.trace_id_high = iprot.readI64();
        struct.setTrace_id_highIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

