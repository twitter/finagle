/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.twitter.test;

import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import org.apache.thrift.*;
import org.apache.thrift.async.*;
import org.apache.thrift.meta_data.*;
import org.apache.thrift.transport.*;
import org.apache.thrift.protocol.*;

import com.twitter.util.Future;
import com.twitter.util.Function;
import com.twitter.util.Function2;
import com.twitter.util.Try;
import com.twitter.util.Return;
import com.twitter.util.Throw;
import com.twitter.finagle.thrift.ThriftClientRequest;

public class SomeStruct implements TBase<SomeStruct, SomeStruct._Fields>, java.io.Serializable, Cloneable {
  private static final TStruct STRUCT_DESC = new TStruct("SomeStruct");

  private static final TField ARG_ONE_FIELD_DESC = new TField("arg_one", TType.I32, (short)1);
  private static final TField ARG_TWO_FIELD_DESC = new TField("arg_two", TType.STRING, (short)2);

  public int arg_one;
  public String arg_two;

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements TFieldIdEnum {
    ARG_ONE((short)1, "arg_one"),
    ARG_TWO((short)2, "arg_two");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ARG_ONE
          return ARG_ONE;
        case 2: // ARG_TWO
          return ARG_TWO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ARG_ONE_ISSET_ID = 0;
  private BitSet __isset_bit_vector = new BitSet(1);

  public static final Map<_Fields, FieldMetaData> metaDataMap;
  static {
    Map<_Fields, FieldMetaData> tmpMap = new EnumMap<_Fields, FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ARG_ONE, new FieldMetaData("arg_one", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMap.put(_Fields.ARG_TWO, new FieldMetaData("arg_two", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    FieldMetaData.addStructMetaDataMap(SomeStruct.class, metaDataMap);
  }

  public SomeStruct() {
  }

  public SomeStruct(
    int arg_one,
    String arg_two)
  {
    this();
    this.arg_one = arg_one;
    setArg_oneIsSet(true);
    this.arg_two = arg_two;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SomeStruct(SomeStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.arg_one = other.arg_one;
    if (other.isSetArg_two()) {
      this.arg_two = other.arg_two;
    }
  }

  public SomeStruct deepCopy() {
    return new SomeStruct(this);
  }

  @Override
  public void clear() {
    setArg_oneIsSet(false);
    this.arg_one = 0;
    this.arg_two = null;
  }

  public int getArg_one() {
    return this.arg_one;
  }

  public SomeStruct setArg_one(int arg_one) {
    this.arg_one = arg_one;
    setArg_oneIsSet(true);
    return this;
  }

  public void unsetArg_one() {
    __isset_bit_vector.clear(__ARG_ONE_ISSET_ID);
  }

  /** Returns true if field arg_one is set (has been asigned a value) and false otherwise */
  public boolean isSetArg_one() {
    return __isset_bit_vector.get(__ARG_ONE_ISSET_ID);
  }

  public void setArg_oneIsSet(boolean value) {
    __isset_bit_vector.set(__ARG_ONE_ISSET_ID, value);
  }

  public String getArg_two() {
    return this.arg_two;
  }

  public SomeStruct setArg_two(String arg_two) {
    this.arg_two = arg_two;
    return this;
  }

  public void unsetArg_two() {
    this.arg_two = null;
  }

  /** Returns true if field arg_two is set (has been asigned a value) and false otherwise */
  public boolean isSetArg_two() {
    return this.arg_two != null;
  }

  public void setArg_twoIsSet(boolean value) {
    if (!value) {
      this.arg_two = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ARG_ONE:
      if (value == null) {
        unsetArg_one();
      } else {
        setArg_one((Integer)value);
      }
      break;

    case ARG_TWO:
      if (value == null) {
        unsetArg_two();
      } else {
        setArg_two((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ARG_ONE:
      return new Integer(getArg_one());

    case ARG_TWO:
      return getArg_two();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been asigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ARG_ONE:
      return isSetArg_one();
    case ARG_TWO:
      return isSetArg_two();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SomeStruct)
      return this.equals((SomeStruct)that);
    return false;
  }

  public boolean equals(SomeStruct that) {
    if (that == null)
      return false;

    boolean this_present_arg_one = true;
    boolean that_present_arg_one = true;
    if (this_present_arg_one || that_present_arg_one) {
      if (!(this_present_arg_one && that_present_arg_one))
        return false;
      if (this.arg_one != that.arg_one)
        return false;
    }

    boolean this_present_arg_two = true && this.isSetArg_two();
    boolean that_present_arg_two = true && that.isSetArg_two();
    if (this_present_arg_two || that_present_arg_two) {
      if (!(this_present_arg_two && that_present_arg_two))
        return false;
      if (!this.arg_two.equals(that.arg_two))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(SomeStruct other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    SomeStruct typedOther = (SomeStruct)other;

    lastComparison = Boolean.valueOf(isSetArg_one()).compareTo(typedOther.isSetArg_one());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg_one()) {
      lastComparison = TBaseHelper.compareTo(this.arg_one, typedOther.arg_one);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArg_two()).compareTo(typedOther.isSetArg_two());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArg_two()) {
      lastComparison = TBaseHelper.compareTo(this.arg_two, typedOther.arg_two);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(TProtocol iprot) throws TException {
    TField field;
    iprot.readStructBegin();
    while (true)
    {
      field = iprot.readFieldBegin();
      if (field.type == TType.STOP) { 
        break;
      }
      switch (field.id) {
        case 1: // ARG_ONE
          if (field.type == TType.I32) {
            this.arg_one = iprot.readI32();
            setArg_oneIsSet(true);
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        case 2: // ARG_TWO
          if (field.type == TType.STRING) {
            this.arg_two = iprot.readString();
          } else { 
            TProtocolUtil.skip(iprot, field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, field.type);
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();

    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(ARG_ONE_FIELD_DESC);
    oprot.writeI32(this.arg_one);
    oprot.writeFieldEnd();
    if (this.arg_two != null) {
      oprot.writeFieldBegin(ARG_TWO_FIELD_DESC);
      oprot.writeString(this.arg_two);
      oprot.writeFieldEnd();
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SomeStruct(");
    boolean first = true;

    sb.append("arg_one:");
    sb.append(this.arg_one);
    first = false;
    if (!first) sb.append(", ");
    sb.append("arg_two:");
    if (this.arg_two == null) {
      sb.append("null");
    } else {
      sb.append(this.arg_two);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

